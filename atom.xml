<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
    <id>https://topul.github.io</id>
    <title>不解风情</title>
    <updated>2020-04-06T12:47:06.550Z</updated>
    <generator>https://github.com/jpmonette/feed</generator>
    <link rel="alternate" href="https://topul.github.io"/>
    <link rel="self" href="https://topul.github.io/atom.xml"/>
    <subtitle>温故而知新，这里就记录一些随记吧</subtitle>
    <logo>https://topul.github.io/images/avatar.png</logo>
    <icon>https://topul.github.io/favicon.ico</icon>
    <rights>All rights reserved 2020, 不解风情</rights>
    <entry>
        <title type="html"><![CDATA[常用参考表]]></title>
        <id>https://topul.github.io/post/chang-yong-can-kao-biao/</id>
        <link href="https://topul.github.io/post/chang-yong-can-kao-biao/">
        </link>
        <updated>2020-04-06T12:26:18.000Z</updated>
        <content type="html"><![CDATA[<p>HTTP状态码：</p>
<table>
<thead>
<tr>
<th style="text-align:left">状态码</th>
<th style="text-align:center">含义</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:left">100</td>
<td style="text-align:center">客户端应当继续发送请求。这个临时响应是用来通知客户端它的部分请求已经被服务器接收，且仍未被拒绝。客户端应当继续发送请求的剩余部分，或者如果请求已经完成，忽略这个响应。服务器必须在请求完成后向客户端发送一个最终响应。</td>
</tr>
<tr>
<td style="text-align:left">101</td>
<td style="text-align:center">服务器已经理解了客户端的请求，并将通过Upgrade 消息头通知客户端采用不同的协议来完成这个请求。在发送完这个响应最后的空行后，服务器将会切换到在Upgrade 消息头中定义的那些协议。 只有在切换新的协议更有好处的时候才应该采取类似措施。例如，切换到新的HTTP 版本比旧版本更有优势，或者切换到一个实时且同步的协议以传送利用此类特性的资源。</td>
</tr>
<tr>
<td style="text-align:left">102</td>
<td style="text-align:center">由WebDAV（RFC 2518）扩展的状态码，代表处理将被继续执行。</td>
</tr>
<tr>
<td style="text-align:left">200</td>
<td style="text-align:center">请求已成功，请求所希望的响应头或数据体将随此响应返回。</td>
</tr>
<tr>
<td style="text-align:left">201</td>
<td style="text-align:center">请求已经被实现，而且有一个新的资源已经依据请求的需要而建立，且其 URI 已经随Location 头信息返回。假如需要的资源无法及时建立的话，应当返回 '202 Accepted'。</td>
</tr>
<tr>
<td style="text-align:left">202</td>
<td style="text-align:center">服务器已接受请求，但尚未处理。正如它可能被拒绝一样，最终该请求可能会也可能不会被执行。在异步操作的场合下，没有比发送这个状态码更方便的做法了。 返回202状态码的响应的目的是允许服务器接受其他过程的请求（例如某个每天只执行一次的基于批处理的操作），而不必让客户端一直保持与服务器的连接直到批处理操作全部完成。在接受请求处理并返回202状态码的响应应当在返回的实体中包含一些指示处理当前状态的信息，以及指向处理状态监视器或状态预测的指针，以便用户能够估计操作是否已经完成。</td>
</tr>
<tr>
<td style="text-align:left">203</td>
<td style="text-align:center">服务器已成功处理了请求，但返回的实体头部元信息不是在原始服务器上有效的确定集合，而是来自本地或者第三方的拷贝。当前的信息可能是原始版本的子集或者超集。例如，包含资源的元数据可能导致原始服务器知道元信息的超级。使用此状态码不是必须的，而且只有在响应不使用此状态码便会返回200 OK的情况下才是合适的。</td>
</tr>
<tr>
<td style="text-align:left">204</td>
<td style="text-align:center">服务器成功处理了请求，但不需要返回任何实体内容，并且希望返回更新了的元信息。响应可能通过实体头部的形式，返回新的或更新后的元信息。如果存在这些头部信息，则应当与所请求的变量相呼应。 如果客户端是浏览器的话，那么用户浏览器应保留发送了该请求的页面，而不产生任何文档视图上的变化，即使按照规范新的或更新后的元信息应当被应用到用户浏览器活动视图中的文档。 由于204响应被禁止包含任何消息体，因此它始终以消息头后的第一个空行结尾。</td>
</tr>
<tr>
<td style="text-align:left">205</td>
<td style="text-align:center">服务器成功处理了请求，且没有返回任何内容。但是与204响应不同，返回此状态码的响应要求请求者重置文档视图。该响应主要是被用于接受用户输入后，立即重置表单，以便用户能够轻松地开始另一次输入。 与204响应一样，该响应也被禁止包含任何消息体，且以消息头后的第一个空行结束。</td>
</tr>
<tr>
<td style="text-align:left">206</td>
<td style="text-align:center">服务器已经成功处理了部分 GET 请求。类似于 FlashGet 或者迅雷这类的 HTTP 下载工具都是使用此类响应实现断点续传或者将一个大文档分解为多个下载段同时下载。 该请求必须包含 Range 头信息来指示客户端希望得到的内容范围，并且可能包含 If-Range 来作为请求条件。 响应必须包含如下的头部域： Content-Range 用以指示本次响应中返回的内容的范围；如果是 Content-Type 为 multipart/byteranges 的多段下载，则每一 multipart 段中都应包含 Content-Range 域用以指示本段的内容范围。假如响应中包含 Content-Length，那么它的数值必须匹配它返回的内容范围的真实字节数。 Date ETag 和/或 Content-Location，假如同样的请求本应该返回200响应。 Expires, Cache-Control，和/或 Vary，假如其值可能与之前相同变量的其他响应对应的值不同的话。 假如本响应请求使用了 If-Range 强缓存验证，那么本次响应不应该包含其他实体头；假如本响应的请求使用了 If-Range 弱缓存验证，那么本次响应禁止包含其他实体头；这避免了缓存的实体内容和更新了的实体头信息之间的不一致。否则，本响应就应当包含所有本应该返回200响应中应当返回的所有实体头部域。 假如 ETag 或 Last-Modified 头部不能精确匹配的话，则客户端缓存应禁止将206响应返回的内容与之前任何缓存过的内容组合在一起。 任何不支持 Range 以及 Content-Range 头的缓存都禁止缓存206响应返回的内容。</td>
</tr>
<tr>
<td style="text-align:left">207</td>
<td style="text-align:center">由WebDAV(RFC 2518)扩展的状态码，代表之后的消息体将是一个XML消息，并且可能依照之前子请求数量的不同，包含一系列独立的响应代码。</td>
</tr>
<tr>
<td style="text-align:left">300</td>
<td style="text-align:center">被请求的资源有一系列可供选择的回馈信息，每个都有自己特定的地址和浏览器驱动的商议信息。用户或浏览器能够自行选择一个首选的地址进行重定向。 除非这是一个 HEAD 请求，否则该响应应当包括一个资源特性及地址的列表的实体，以便用户或浏览器从中选择最合适的重定向地址。这个实体的格式由 Content-Type 定义的格式所决定。浏览器可能根据响应的格式以及浏览器自身能力，自动作出最合适的选择。当然，RFC 2616规范并没有规定这样的自动选择该如何进行。 如果服务器本身已经有了首选的回馈选择，那么在 Location 中应当指明这个回馈的 URI；浏览器可能会将这个 Location 值作为自动重定向的地址。此外，除非额外指定，否则这个响应也是可缓存的。</td>
</tr>
<tr>
<td style="text-align:left">301</td>
<td style="text-align:center">被请求的资源已永久移动到新位置，并且将来任何对此资源的引用都应该使用本响应返回的若干个 URI 之一。如果可能，拥有链接编辑功能的客户端应当自动把请求的地址修改为从服务器反馈回来的地址。除非额外指定，否则这个响应也是可缓存的。 新的永久性的 URI 应当在响应的 Location 域中返回。除非这是一个 HEAD 请求，否则响应的实体中应当包含指向新的 URI 的超链接及简短说明。 如果这不是一个 GET 或者 HEAD 请求，因此浏览器禁止自动进行重定向，除非得到用户的确认，因为请求的条件可能因此发生变化。 注意：对于某些使用 HTTP/1.0 协议的浏览器，当它们发送的 POST 请求得到了一个301响应的话，接下来的重定向请求将会变成 GET 方式。</td>
</tr>
<tr>
<td style="text-align:left">302</td>
<td style="text-align:center">请求的资源现在临时从不同的 URI 响应请求。由于这样的重定向是临时的，客户端应当继续向原有地址发送以后的请求。只有在Cache-Control或Expires中进行了指定的情况下，这个响应才是可缓存的。 新的临时性的 URI 应当在响应的 Location 域中返回。除非这是一个 HEAD 请求，否则响应的实体中应当包含指向新的 URI 的超链接及简短说明。 如果这不是一个 GET 或者 HEAD 请求，那么浏览器禁止自动进行重定向，除非得到用户的确认，因为请求的条件可能因此发生变化。 注意：虽然RFC 1945和RFC 2068规范不允许客户端在重定向时改变请求的方法，但是很多现存的浏览器将302响应视作为303响应，并且使用 GET 方式访问在 Location 中规定的 URI，而无视原先请求的方法。状态码303和307被添加了进来，用以明确服务器期待客户端进行何种反应。</td>
</tr>
<tr>
<td style="text-align:left">303</td>
<td style="text-align:center">对应当前请求的响应可以在另一个 URI 上被找到，而且客户端应当采用 GET 的方式访问那个资源。这个方法的存在主要是为了允许由脚本激活的POST请求输出重定向到一个新的资源。这个新的 URI 不是原始资源的替代引用。同时，303响应禁止被缓存。当然，第二个请求（重定向）可能被缓存。 新的 URI 应当在响应的 Location 域中返回。除非这是一个 HEAD 请求，否则响应的实体中应当包含指向新的 URI 的超链接及简短说明。 注意：许多 HTTP/1.1 版以前的 浏览器不能正确理解303状态。如果需要考虑与这些浏览器之间的互动，302状态码应该可以胜任，因为大多数的浏览器处理302响应时的方式恰恰就是上述规范要求客户端处理303响应时应当做的。</td>
</tr>
<tr>
<td style="text-align:left">304</td>
<td style="text-align:center">如果客户端发送了一个带条件的 GET 请求且该请求已被允许，而文档的内容（自上次访问以来或者根据请求的条件）并没有改变，则服务器应当返回这个状态码。304响应禁止包含消息体，因此始终以消息头后的第一个空行结尾。 该响应必须包含以下的头信息： Date，除非这个服务器没有时钟。假如没有时钟的服务器也遵守这些规则，那么代理服务器以及客户端可以自行将 Date 字段添加到接收到的响应头中去（正如RFC 2068中规定的一样），缓存机制将会正常工作。 ETag 和/或 Content-Location，假如同样的请求本应返回200响应。 Expires, Cache-Control，和/或Vary，假如其值可能与之前相同变量的其他响应对应的值不同的话。 假如本响应请求使用了强缓存验证，那么本次响应不应该包含其他实体头；否则（例如，某个带条件的 GET 请求使用了弱缓存验证），本次响应禁止包含其他实体头；这避免了缓存了的实体内容和更新了的实体头信息之间的不一致。 假如某个304响应指明了当前某个实体没有缓存，那么缓存系统必须忽视这个响应，并且重复发送不包含限制条件的请求。 假如接收到一个要求更新某个缓存条目的304响应，那么缓存系统必须更新整个条目以反映所有在响应中被更新的字段的值。</td>
</tr>
<tr>
<td style="text-align:left">305</td>
<td style="text-align:center">被请求的资源必须通过指定的代理才能被访问。Location 域中将给出指定的代理所在的 URI 信息，接收者需要重复发送一个单独的请求，通过这个代理才能访问相应资源。只有原始服务器才能建立305响应。 注意：RFC 2068中没有明确305响应是为了重定向一个单独的请求，而且只能被原始服务器建立。忽视这些限制可能导致严重的安全后果。</td>
</tr>
<tr>
<td style="text-align:left">306</td>
<td style="text-align:center">在最新版的规范中，306状态码已经不再被使用。</td>
</tr>
<tr>
<td style="text-align:left">307</td>
<td style="text-align:center">请求的资源现在临时从不同的URI 响应请求。由于这样的重定向是临时的，客户端应当继续向原有地址发送以后的请求。只有在Cache-Control或Expires中进行了指定的情况下，这个响应才是可缓存的。 新的临时性的URI 应当在响应的 Location 域中返回。除非这是一个HEAD 请求，否则响应的实体中应当包含指向新的URI 的超链接及简短说明。因为部分浏览器不能识别307响应，因此需要添加上述必要信息以便用户能够理解并向新的 URI 发出访问请求。 如果这不是一个GET 或者 HEAD 请求，那么浏览器禁止自动进行重定向，除非得到用户的确认，因为请求的条件可能因此发生变化。</td>
</tr>
<tr>
<td style="text-align:left">400</td>
<td style="text-align:center">1、语义有误，当前请求无法被服务器理解。除非进行修改，否则客户端不应该重复提交这个请求。 2、请求参数有误。</td>
</tr>
<tr>
<td style="text-align:left">401</td>
<td style="text-align:center">当前请求需要用户验证。该响应必须包含一个适用于被请求资源的 WWW-Authenticate 信息头用以询问用户信息。客户端可以重复提交一个包含恰当的 Authorization 头信息的请求。如果当前请求已经包含了 Authorization 证书，那么401响应代表着服务器验证已经拒绝了那些证书。如果401响应包含了与前一个响应相同的身份验证询问，且浏览器已经至少尝试了一次验证，那么浏览器应当向用户展示响应中包含的实体信息，因为这个实体信息中可能包含了相关诊断信息。参见RFC 2617。</td>
</tr>
<tr>
<td style="text-align:left">402</td>
<td style="text-align:center">该状态码是为了将来可能的需求而预留的。</td>
</tr>
<tr>
<td style="text-align:left">403</td>
<td style="text-align:center">服务器已经理解请求，但是拒绝执行它。与401响应不同的是，身份验证并不能提供任何帮助，而且这个请求也不应该被重复提交。如果这不是一个 HEAD 请求，而且服务器希望能够讲清楚为何请求不能被执行，那么就应该在实体内描述拒绝的原因。当然服务器也可以返回一个404响应，假如它不希望让客户端获得任何信息。</td>
</tr>
<tr>
<td style="text-align:left">404</td>
<td style="text-align:center">请求失败，请求所希望得到的资源未被在服务器上发现。没有信息能够告诉用户这个状况到底是暂时的还是永久的。假如服务器知道情况的话，应当使用410状态码来告知旧资源因为某些内部的配置机制问题，已经永久的不可用，而且没有任何可以跳转的地址。404这个状态码被广泛应用于当服务器不想揭示到底为何请求被拒绝或者没有其他适合的响应可用的情况下。</td>
</tr>
<tr>
<td style="text-align:left">405</td>
<td style="text-align:center">请求行中指定的请求方法不能被用于请求相应的资源。该响应必须返回一个Allow 头信息用以表示出当前资源能够接受的请求方法的列表。 鉴于 PUT，DELETE 方法会对服务器上的资源进行写操作，因而绝大部分的网页服务器都不支持或者在默认配置下不允许上述请求方法，对于此类请求均会返回405错误。</td>
</tr>
<tr>
<td style="text-align:left">406</td>
<td style="text-align:center">请求的资源的内容特性无法满足请求头中的条件，因而无法生成响应实体。 除非这是一个 HEAD 请求，否则该响应就应当返回一个包含可以让用户或者浏览器从中选择最合适的实体特性以及地址列表的实体。实体的格式由 Content-Type 头中定义的媒体类型决定。浏览器可以根据格式及自身能力自行作出最佳选择。但是，规范中并没有定义任何作出此类自动选择的标准。</td>
</tr>
<tr>
<td style="text-align:left">407</td>
<td style="text-align:center">与401响应类似，只不过客户端必须在代理服务器上进行身份验证。代理服务器必须返回一个 Proxy-Authenticate 用以进行身份询问。客户端可以返回一个 Proxy-Authorization 信息头用以验证。参见RFC 2617。</td>
</tr>
<tr>
<td style="text-align:left">408</td>
<td style="text-align:center">请求超时。客户端没有在服务器预备等待的时间内完成一个请求的发送。客户端可以随时再次提交这一请求而无需进行任何更改。</td>
</tr>
<tr>
<td style="text-align:left">409</td>
<td style="text-align:center">由于和被请求的资源的当前状态之间存在冲突，请求无法完成。这个代码只允许用在这样的情况下才能被使用：用户被认为能够解决冲突，并且会重新提交新的请求。该响应应当包含足够的信息以便用户发现冲突的源头。 冲突通常发生于对 PUT 请求的处理中。例如，在采用版本检查的环境下，某次 PUT 提交的对特定资源的修改请求所附带的版本信息与之前的某个（第三方）请求向冲突，那么此时服务器就应该返回一个409错误，告知用户请求无法完成。此时，响应实体中很可能会包含两个冲突版本之间的差异比较，以便用户重新提交归并以后的新版本。</td>
</tr>
<tr>
<td style="text-align:left">410</td>
<td style="text-align:center">被请求的资源在服务器上已经不再可用，而且没有任何已知的转发地址。这样的状况应当被认为是永久性的。如果可能，拥有链接编辑功能的客户端应当在获得用户许可后删除所有指向这个地址的引用。如果服务器不知道或者无法确定这个状况是否是永久的，那么就应该使用404状态码。除非额外说明，否则这个响应是可缓存的。 410响应的目的主要是帮助网站管理员维护网站，通知用户该资源已经不再可用，并且服务器拥有者希望所有指向这个资源的远端连接也被删除。这类事件在限时、增值服务中很普遍。同样，410响应也被用于通知客户端在当前服务器站点上，原本属于某个个人的资源已经不再可用。当然，是否需要把所有永久不可用的资源标记为'410 Gone'，以及是否需要保持此标记多长时间，完全取决于服务器拥有者。</td>
</tr>
<tr>
<td style="text-align:left">411</td>
<td style="text-align:center">服务器拒绝在没有定义 Content-Length 头的情况下接受请求。在添加了表明请求消息体长度的有效 Content-Length 头之后，客户端可以再次提交该请求。</td>
</tr>
<tr>
<td style="text-align:left">412</td>
<td style="text-align:center">服务器在验证在请求的头字段中给出先决条件时，没能满足其中的一个或多个。这个状态码允许客户端在获取资源时在请求的元信息（请求头字段数据）中设置先决条件，以此避免该请求方法被应用到其希望的内容以外的资源上。</td>
</tr>
<tr>
<td style="text-align:left">413</td>
<td style="text-align:center">服务器拒绝处理当前请求，因为该请求提交的实体数据大小超过了服务器愿意或者能够处理的范围。此种情况下，服务器可以关闭连接以免客户端继续发送此请求。 如果这个状况是临时的，服务器应当返回一个 Retry-After 的响应头，以告知客户端可以在多少时间以后重新尝试。</td>
</tr>
<tr>
<td style="text-align:left">414</td>
<td style="text-align:center">请求的URI 长度超过了服务器能够解释的长度，因此服务器拒绝对该请求提供服务。这比较少见，通常的情况包括： 本应使用POST方法的表单提交变成了GET方法，导致查询字符串（Query String）过长。 重定向URI “黑洞”，例如每次重定向把旧的 URI 作为新的 URI 的一部分，导致在若干次重定向后 URI 超长。 客户端正在尝试利用某些服务器中存在的安全漏洞攻击服务器。这类服务器使用固定长度的缓冲读取或操作请求的 URI，当 GET 后的参数超过某个数值后，可能会产生缓冲区溢出，导致任意代码被执行[1]。没有此类漏洞的服务器，应当返回414状态码。</td>
</tr>
<tr>
<td style="text-align:left">415</td>
<td style="text-align:center">对于当前请求的方法和所请求的资源，请求中提交的实体并不是服务器中所支持的格式，因此请求被拒绝。</td>
</tr>
<tr>
<td style="text-align:left">416</td>
<td style="text-align:center">如果请求中包含了 Range 请求头，并且 Range 中指定的任何数据范围都与当前资源的可用范围不重合，同时请求中又没有定义 If-Range 请求头，那么服务器就应当返回416状态码。 假如 Range 使用的是字节范围，那么这种情况就是指请求指定的所有数据范围的首字节位置都超过了当前资源的长度。服务器也应当在返回416状态码的同时，包含一个 Content-Range 实体头，用以指明当前资源的长度。这个响应也被禁止使用 multipart/byteranges 作为其 Content-Type。</td>
</tr>
<tr>
<td style="text-align:left">417</td>
<td style="text-align:center">在请求头 Expect 中指定的预期内容无法被服务器满足，或者这个服务器是一个代理服务器，它有明显的证据证明在当前路由的下一个节点上，Expect 的内容无法被满足。</td>
</tr>
<tr>
<td style="text-align:left">421</td>
<td style="text-align:center">从当前客户端所在的IP地址到服务器的连接数超过了服务器许可的最大范围。通常，这里的IP地址指的是从服务器上看到的客户端地址（比如用户的网关或者代理服务器地址）。在这种情况下，连接数的计算可能涉及到不止一个终端用户。</td>
</tr>
<tr>
<td style="text-align:left">422</td>
<td style="text-align:center">从当前客户端所在的IP地址到服务器的连接数超过了服务器许可的最大范围。通常，这里的IP地址指的是从服务器上看到的客户端地址（比如用户的网关或者代理服务器地址）。在这种情况下，连接数的计算可能涉及到不止一个终端用户。</td>
</tr>
<tr>
<td style="text-align:left">422</td>
<td style="text-align:center">请求格式正确，但是由于含有语义错误，无法响应。（RFC 4918 WebDAV）423 Locked 当前资源被锁定。（RFC 4918 WebDAV）</td>
</tr>
<tr>
<td style="text-align:left">424</td>
<td style="text-align:center">由于之前的某个请求发生的错误，导致当前请求失败，例如 PROPPATCH。（RFC 4918 WebDAV）</td>
</tr>
<tr>
<td style="text-align:left">425</td>
<td style="text-align:center">在WebDav Advanced Collections 草案中定义，但是未出现在《WebDAV 顺序集协议》（RFC 3658）中。</td>
</tr>
<tr>
<td style="text-align:left">426</td>
<td style="text-align:center">客户端应当切换到TLS/1.0。（RFC 2817）</td>
</tr>
<tr>
<td style="text-align:left">449</td>
<td style="text-align:center">由微软扩展，代表请求应当在执行完适当的操作后进行重试。</td>
</tr>
<tr>
<td style="text-align:left">500</td>
<td style="text-align:center">服务器遇到了一个未曾预料的状况，导致了它无法完成对请求的处理。一般来说，这个问题都会在服务器的程序码出错时出现。</td>
</tr>
<tr>
<td style="text-align:left">501</td>
<td style="text-align:center">服务器不支持当前请求所需要的某个功能。当服务器无法识别请求的方法，并且无法支持其对任何资源的请求。</td>
</tr>
<tr>
<td style="text-align:left">502</td>
<td style="text-align:center">作为网关或者代理工作的服务器尝试执行请求时，从上游服务器接收到无效的响应。</td>
</tr>
<tr>
<td style="text-align:left">503</td>
<td style="text-align:center">由于临时的服务器维护或者过载，服务器当前无法处理请求。这个状况是临时的，并且将在一段时间以后恢复。如果能够预计延迟时间，那么响应中可以包含一个 Retry-After 头用以标明这个延迟时间。如果没有给出这个 Retry-After 信息，那么客户端应当以处理500响应的方式处理它。 注意：503状态码的存在并不意味着服务器在过载的时候必须使用它。某些服务器只不过是希望拒绝客户端的连接。</td>
</tr>
<tr>
<td style="text-align:left">504</td>
<td style="text-align:center">作为网关或者代理工作的服务器尝试执行请求时，未能及时从上游服务器（URI标识出的服务器，例如HTTP、FTP、LDAP）或者辅助服务器（例如DNS）收到响应。 注意：某些代理服务器在DNS查询超时时会返回400或者500错误</td>
</tr>
<tr>
<td style="text-align:left">505</td>
<td style="text-align:center">服务器不支持，或者拒绝支持在请求中使用的 HTTP 版本。这暗示着服务器不能或不愿使用与客户端相同的版本。响应中应当包含一个描述了为何版本不被支持以及服务器支持哪些协议的实体。</td>
</tr>
<tr>
<td style="text-align:left">506</td>
<td style="text-align:center">由《透明内容协商协议》（RFC 2295）扩展，代表服务器存在内部配置错误：被请求的协商变元资源被配置为在透明内容协商中使用自己，因此在一个协商处理中不是一个合适的重点。</td>
</tr>
<tr>
<td style="text-align:left">507</td>
<td style="text-align:center">服务器无法存储完成请求所必须的内容。这个状况被认为是临时的。WebDAV (RFC 4918)</td>
</tr>
<tr>
<td style="text-align:left">509</td>
<td style="text-align:center">服务器达到带宽限制。这不是一个官方的状态码，但是仍被广泛使用。</td>
</tr>
<tr>
<td style="text-align:left">510</td>
<td style="text-align:center">获取资源所需要的策略并没有没满足。（RFC 2774）</td>
</tr>
</tbody>
</table>
<p>html转义字符：</p>
<table>
<thead>
<tr>
<th style="text-align:left">字符</th>
<th style="text-align:left">十进制</th>
<th style="text-align:left">转义字符</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:left">&quot;</td>
<td style="text-align:left">&amp;#34;</td>
<td style="text-align:left">&amp;quot;</td>
</tr>
<tr>
<td style="text-align:left">&amp;</td>
<td style="text-align:left">&amp;#38;</td>
<td style="text-align:left">&amp;amp;</td>
</tr>
<tr>
<td style="text-align:left">&lt;</td>
<td style="text-align:left">&amp;#60;</td>
<td style="text-align:left">&amp;lt;</td>
</tr>
<tr>
<td style="text-align:left">&gt;</td>
<td style="text-align:left">&amp;#62;</td>
<td style="text-align:left">&amp;gt;</td>
</tr>
<tr>
<td style="text-align:left">空格</td>
<td style="text-align:left">&amp;#160;</td>
<td style="text-align:left">&amp;nbsp;</td>
</tr>
</tbody>
</table>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[解决input number无法拿到非数字值]]></title>
        <id>https://topul.github.io/post/jie-jue-input-number-wu-fa-na-dao-fei-shu-zi-zhi/</id>
        <link href="https://topul.github.io/post/jie-jue-input-number-wu-fa-na-dao-fei-shu-zi-zhi/">
        </link>
        <updated>2020-04-06T12:25:28.000Z</updated>
        <content type="html"><![CDATA[<p>在w3c规范中，如果<code>input type=number</code>输入了一些非数字的字符，就会返回空值，这在做输入校验的时候就不行了，会认为输入框没有输入。好在，input属性里有一个<code>validity</code>，其中的badInput属性可以判断值是否合法。合法值是<code>false</code>，非法则为<code>true</code>。</p>
<p>通过<code>input.validity.badInput</code>就可以判断出当前输入值是否合法，可以跟无输入时的状态进行区分了。</p>
<p>参考文档：https://www.w3.org/TR/html5/sec-forms.html#number-state-typenumber</p>
<p>https://developer.mozilla.org/en-US/docs/Web/API/ValidityState</p>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[设置淘宝代理]]></title>
        <id>https://topul.github.io/post/she-zhi-tao-bao-dai-li/</id>
        <link href="https://topul.github.io/post/she-zhi-tao-bao-dai-li/">
        </link>
        <updated>2020-04-06T12:25:10.000Z</updated>
        <content type="html"><![CDATA[<hr>
<h2 id="layout-posttitle-npm设置淘宝代理categories-blog">layout: post<br>
title: npm设置淘宝代理<br>
categories: blog</h2>
<pre><code class="language-bash">npm config set registry https://registry.npm.taobao.org
npm info underscore
</code></pre>
<p>如果配置成功,第二步会有字符串返回</p>
<p>推荐使用yarn进行包管理</p>
<pre><code class="language-bash"># 安装yarn
npm i -g yarn
</code></pre>
<h3 id="cli-命令比较">CLI 命令比较</h3>
<table>
<thead>
<tr>
<th style="text-align:left">npm (v5)</th>
<th style="text-align:left">Yarn</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:left"><code>npm install</code></td>
<td style="text-align:left"><code>yarn install</code></td>
</tr>
<tr>
<td style="text-align:left"><strong>(不适用)</strong></td>
<td style="text-align:left"><code>yarn install --flat</code></td>
</tr>
<tr>
<td style="text-align:left"><strong>(不适用)</strong></td>
<td style="text-align:left"><code>yarn install --har</code></td>
</tr>
<tr>
<td style="text-align:left"><code>npm install --no-package-lock</code></td>
<td style="text-align:left"><code>yarn install --no-lockfile</code></td>
</tr>
<tr>
<td style="text-align:left"><strong>(不适用)</strong></td>
<td style="text-align:left"><code>yarn install --pure-lockfile</code></td>
</tr>
<tr>
<td style="text-align:left"><code>npm install [package]</code></td>
<td style="text-align:left"><code>yarn add [package]</code></td>
</tr>
<tr>
<td style="text-align:left"><code>npm install [package] --save-dev</code></td>
<td style="text-align:left"><code>yarn add [package] --dev</code></td>
</tr>
<tr>
<td style="text-align:left"><strong>(不适用)</strong></td>
<td style="text-align:left"><code>yarn add [package] --peer</code></td>
</tr>
<tr>
<td style="text-align:left"><code>npm install [package] --save-optional</code></td>
<td style="text-align:left"><code>yarn add [package] --optional</code></td>
</tr>
<tr>
<td style="text-align:left"><code>npm install [package] --save-exact</code></td>
<td style="text-align:left"><code>yarn add [package] --exact</code></td>
</tr>
<tr>
<td style="text-align:left"><strong>(不适用)</strong></td>
<td style="text-align:left"><code>yarn add [package] --tilde</code></td>
</tr>
<tr>
<td style="text-align:left"><code>npm install [package] --global</code></td>
<td style="text-align:left"><code>yarn global add [package]</code></td>
</tr>
<tr>
<td style="text-align:left"><code>npm update --global</code></td>
<td style="text-align:left"><code>yarn global upgrade</code></td>
</tr>
<tr>
<td style="text-align:left"><code>npm rebuild</code></td>
<td style="text-align:left"><code>yarn install --force</code></td>
</tr>
<tr>
<td style="text-align:left"><code>npm uninstall [package]</code></td>
<td style="text-align:left"><code>yarn remove [package]</code></td>
</tr>
<tr>
<td style="text-align:left"><code>npm cache clean</code></td>
<td style="text-align:left"><code>yarn cache clean [package]</code></td>
</tr>
<tr>
<td style="text-align:left"><code>rm -rf node_modules &amp;&amp; npm install</code></td>
<td style="text-align:left"><code>yarn upgrade</code></td>
</tr>
</tbody>
</table>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[Charles安装证书到小米手机]]></title>
        <id>https://topul.github.io/post/charles-an-zhuang-zheng-shu-dao-xiao-mi-shou-ji/</id>
        <link href="https://topul.github.io/post/charles-an-zhuang-zheng-shu-dao-xiao-mi-shou-ji/">
        </link>
        <updated>2020-04-06T12:24:52.000Z</updated>
        <content type="html"><![CDATA[<p>1.使用第三方浏览器下载.pem 格式的文件</p>
<p>2.将这个文件放入小米的 DownLoad 文件夹下</p>
<p>3.将.pem 文件修改为.crt 格式</p>
<p>4.设置---更多设置---系统安全---从存储设备安装--选择文件，选定该文件</p>
<p>使用系统自带浏览器下载安装，会一直提示没有可用证书的</p>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[git设置免密访问github]]></title>
        <id>https://topul.github.io/post/git-she-zhi-mian-mi-fang-wen-github/</id>
        <link href="https://topul.github.io/post/git-she-zhi-mian-mi-fang-wen-github/">
        </link>
        <updated>2020-04-06T12:24:35.000Z</updated>
        <content type="html"><![CDATA[<hr>
<h2 id="layout-posttitle-git设置免密访问githubcategories-blog">layout: post<br>
title: git设置免密访问github<br>
categories: blog</h2>
<p>由于你的本地 Git 仓库和 GitHub 仓库之间的传输是通过SSH加密的，所以我们需要配置验证信息：</p>
<p>使用以下命令生成 SSH Key：</p>
<pre><code class="language-ba">ssh-keygen -t rsa -C &quot;youremail@example.com&quot;
</code></pre>
<p>后面的 your_email@youremail.com改为你在 Github 上注册的邮箱，之后会要求确认路径和输入密码，我们这使用默认的一路回车就行。成功的话会在 ~/ 下生成 .ssh 文件夹，进去，打开 <strong>id_rsa.pub</strong>，复制里面的 <strong>key</strong>。</p>
<p>回到 github 上，进入 Account =&gt; Settings（账户配置）。</p>
<figure data-type="image" tabindex="1"><img src="https://www.runoob.com/wp-content/uploads/2015/03/48840BF0-992F-4CCC-A388-15CB74819D88.jpg" alt="img" loading="lazy"></figure>
<p>左边选择 <strong>SSH and GPG keys</strong>，然后点击 <strong>New SSH key</strong> 按钮,title 设置标题，可以随便填，粘贴在你电脑上生成的 key。</p>
<figure data-type="image" tabindex="2"><img src="https://www.runoob.com/wp-content/uploads/2015/03/106AD534-A38A-47F3-88A3-B7BE3F2FEEF1.jpg" alt="img" loading="lazy"></figure>
<p>添加成功后界面如下所示</p>
<figure data-type="image" tabindex="3"><img src="https://www.runoob.com/wp-content/uploads/2015/03/EC8F8872-091A-4CAB-90F2-616F34F350A9.jpg" alt="img" loading="lazy"></figure>
<p>为了验证是否成功，输入以下命令：</p>
<pre><code class="language-bash">$ ssh -T git@github.com
Hi tianqixin! You've successfully authenticated, but GitHub does not provide shell access.
</code></pre>
<p>然后<a href="https://git-scm.com/book/zh/v1/%E8%87%AA%E5%AE%9A%E4%B9%89-Git-%E9%85%8D%E7%BD%AE-Git">配置git</a></p>
<pre><code class="language-bash">$ git config --global user.name &quot;John Doe&quot;
$ git config --global user.email johndoe@example.com
</code></pre>
<p>此时即可正常使用。</p>
<p>如果你使用HTTPS克隆GitHub仓库，那就需要使用凭据帮助程序告诉Git每次与GitHub交谈时都记住你的GitHub用户名和密码。<a href="https://help.github.com/en/articles/caching-your-github-password-in-git">github帮助</a></p>
<ol>
<li>
<p>在命令行中，输入以下命令:</p>
<pre><code class="language-shell">$ git config --global credential.helper cache
# Set git to use the credential memory cache
</code></pre>
</li>
<li>
<p>如果需要改变密码缓存的过期时间，输入以下命令:</p>
<pre><code class="language-shell">$ git config --global credential.helper 'cache --timeout=3600'
# Set the cache to timeout after 1 hour (setting is in seconds)
</code></pre>
</li>
</ol>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[JSON比Object解析更快？]]></title>
        <id>https://topul.github.io/post/json-bi-object-jie-xi-geng-kuai/</id>
        <link href="https://topul.github.io/post/json-bi-object-jie-xi-geng-kuai/">
        </link>
        <updated>2020-04-06T12:24:13.000Z</updated>
        <content type="html"><![CDATA[<p>JavaScript 应用程序（尤其是 Web 应用程序）通常使用对象来表示状态或其他数据，特别是使用 React 或 Redux 之类的框架构建的 web 应用，并且这些应用通常依赖这些数据进行初始渲染。这时候，这个 JavaScript 对象就一直处在关键渲染路径上，直到所有数据被加载，解析，编译和执行前，用户只能盯着白屏。</p>
<p>怎么能加快首次渲染速度呢？</p>
<p><strong>方法 1:服务端渲染</strong></p>
<p>服务端渲染是把数据在服务端渲染完成后，将渲染的 HTML 发送给客户端，这样客户端就不需要使用 JavaScript 了。<br>
但不过不实用服务端渲染呢？</p>
<p><strong>方法 2:JSON.parse</strong></p>
<p>由于 JSON 语法比 JavaScript 语法简单得多，因此与 JavaScript 相比，JSON 的解析效率更高。所以可以将 JSON 应用于提高需要大型对象（例如内联 Redux 存储）的 Web 应用的启动性能。将数据作为 JavaScript 对象文字内联，比如：</p>
<pre><code class="language-javascript">const data = { foo: 42, bar: 1337 }; // 🐌
</code></pre>
<p>它可以以 JSON 字符串化形式表示，然后在运行时进行 JSON 解析:</p>
<pre><code class="language-javascript">const data = JSON.parse('{&quot;foo&quot;:42,&quot;bar&quot;:1337}'); // 🚀
</code></pre>
<p>你认为这两个代码哪个更快呢？</p>
<p>事实证明，JSON 方法要快得多！虽然感觉不可思议，JavaScript 对象感觉是更直接的方法，而 JSON.parse 中间又转化了一层，这是为什么呢？</p>
<p>对于 JavaScript 解析器来说，JSON 大量的数据只是一个 StringLiteral 令牌，只不过是具有一个论点的 CallExpression。<br>
而同样的 JS 对象包含了很多的标记，每个属性名都是标识符或类似字符串的文字，在完整解析之前，每个值都可以是任意类型的，它们可以是嵌套的对象或数组，这样就会有更多的标识符需要识别。</p>
<p>因此，与 JSON.parse 示例相比，JavaScript 解析器要做的工作多了太多了。</p>
<p><strong>那么两个代码速度到底相差多少呢？</strong></p>
<p>由于仅对JSON字符串求值一次，与JavaScript对象文字相比，JSON.parse方法就快得多，尤其是对于硬重载。有一个很好的经验法则是将此技术应用于10 kB或更大的对象。</p>
<figure data-type="image" tabindex="1"><img src="../imgs/json.svg" alt="img" loading="lazy"></figure>
<p>可以看到，与JavaScript对象相比，JSON.parse（'…'）的解析，编译和执行速度要快得多-不仅在V8中（速度是后者的1.7倍），而是在所有主要的JavaScript引擎中。</p>
<p>在将JS对象用于大量数据时，还存在其他风险：它们可能会被解析两次！</p>
<p>1、数据加载完成时</p>
<p>2、数据被延迟解析的时候</p>
<p>第一次解析是无法避免的。不过，可以通过将对象放在代码顶部或</p>
<p>中来避免第二次解析。</p>
<p>怎么样开始使用JSON.parse呢？</p>
<p>由于JS对象更具有可读性，所以还是建议在源码中使用对象的形式。不过webpack有插件可以帮助我们将对象自动转化成JSON.parse：</p>
<p>1、json-parse-webpack</p>
<p>2、json-parse-babel</p>
<p>大家可以尝试一下。</p>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[React props vs Vue props]]></title>
        <id>https://topul.github.io/post/react-props-vs-vue-props/</id>
        <link href="https://topul.github.io/post/react-props-vs-vue-props/">
        </link>
        <updated>2020-04-06T12:23:23.000Z</updated>
        <content type="html"><![CDATA[<h4 id="react">React</h4>
<p>React的props是通过类继承super(props)进行传递的,可同时传递的还有函数,所以子组件想改变父组件的状态,可以传递函数给子组件调用</p>
<h4 id="vue">Vue</h4>
<p>Vue的props与data类似,都是显示的写进来,并且子组件想修改父组件的数据,是通过向父组件发射事件进行的</p>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[ssh使用scp或rsync上传下载文件]]></title>
        <id>https://topul.github.io/post/ssh-shi-yong-scp-huo-rsync-shang-chuan-xia-zai-wen-jian/</id>
        <link href="https://topul.github.io/post/ssh-shi-yong-scp-huo-rsync-shang-chuan-xia-zai-wen-jian/">
        </link>
        <updated>2020-04-06T12:20:59.000Z</updated>
        <content type="html"><![CDATA[<p>在 Linux 下一般用 scp 或者 rsync 个命令来通过 ssh 传输文件。</p>
<p><em>注意：用户要有目标的响应权限，下载需要有读权限，上传需要有写权限，否则会提示错误：Permission denied</em></p>
<h3 id="1-下载文件">1 下载文件</h3>
<p>如下选择一种方式：</p>
<pre><code class="language-bash">scp username@servername:/path/filename /var/www/local_dir  # 用scp
rsync -P -e 'ssh -p 12345' username@servername:/path/filename /var/www/local_dir  # 或者rsync，以下同理，-P显示进度
</code></pre>
<p>将远程文件下载到本地 local_dir 目录，例如：</p>
<pre><code class="language-bash">scp root@192.168.0.101:/var/www/test.txt /var/www/local_dir
</code></pre>
<p>把 192.168.0.101 上的 /var/www/test.txt 的文件下载到 /var/www/local_dir（本地目录）</p>
<h3 id="2-上传文件">2 上传文件</h3>
<p>命令格式：</p>
<pre><code class="language-bash">scp /path/filename username@servername:/path
</code></pre>
<p>例如：</p>
<pre><code class="language-bash">scp /var/www/test.php root@192.168.0.101:/var/www/
</code></pre>
<p>把本机 /var/www/test.php 文件上传到 192.168.0.101 服务器上的 /var/www/ 目录中。</p>
<h3 id="3-下载目录">3 下载目录</h3>
<p>命令格式：</p>
<pre><code class="language-bash">scp -r username@servername:/var/www/remote_dir/ /var/www/local_dir
</code></pre>
<p>remote_dir 为远程目录，local_dir 为本地目录，例如：</p>
<pre><code class="language-bash">scp -r root@192.168.0.101:/var/www/test /var/www/
</code></pre>
<h3 id="4-上传目录">4 上传目录</h3>
<pre><code class="language-bash">scp -r local_dir username@servername:remote_dir
</code></pre>
<p>例如：</p>
<pre><code class="language-bash">scp -r test root@192.168.0.101:/var/www/
</code></pre>
<p>把当前目录下的 test 目录上传到服务器的 /var/www/ 目录</p>
<h3 id="5-指定端口">5 指定端口</h3>
<p>指定端口用-P 参数，注意是大写的 P，例如：</p>
<pre><code class="language-bash">scp -P 8000 -r test root@192.168.0.101:/var/www/
</code></pre>
<p>这里指定 8000 端口。</p>
]]></content>
    </entry>
</feed>